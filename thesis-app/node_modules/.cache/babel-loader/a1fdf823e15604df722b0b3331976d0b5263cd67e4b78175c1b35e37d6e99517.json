{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\ThesesTracker\\\\thesis-app\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from \"./lib/helper/supabaseClient.js\";\nimport Login from './login/Login.jsx';\nimport AdminLogin from './login/AdminLogin.jsx';\nimport StudentLogin from './login/StudentLogin.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [role, setRole] = useState(null);\n  useEffect(() => {\n    // Function to fetch role from PostgreSQL based on userID\n    const fetchUserRole = async userId => {\n      var _data$;\n      const {\n        data,\n        error\n      } = await supabase.from('user_roles') // SQL Table name\n      .select('role') // the uhhhh table component containing the roles\n      .eq('user_id', userId);\n      if (error) {\n        console.error('Error fetching role:', error);\n        return null;\n      }\n      return (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.role; // Assuming only one role per user\n    };\n    const getUser = async () => {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (user) {\n        setUser(user);\n        // Fetch role from the database (PostgreSQL)\n        const userRole = await fetchUserRole(user.id);\n        /*\r\n        // If the user has no role, default to \"student\"\r\n        if (!userRole) {\r\n          await supabase.rpc('create_user_role', {\r\n            user_id: user.id,\r\n          });\r\n          \r\n          await supabase\r\n            .from(\"user_roles\")\r\n            .insert({ \r\n              user_id: user.id, role: \"student\" \r\n            });\r\n              const userRole = await fetchUserRole(user.id);\r\n        }\r\n        */\n        setRole(userRole);\n      }\n    };\n    getUser();\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n      if (session !== null && session !== void 0 && session.user) {\n        fetchUserRole(session.user.id).then(setRole); // Fetch role on session change\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const logout = async () => {\n    await supabase.auth.signOut();\n    setUser(null);\n    setRole(null);\n  };\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  }\n  if (user) {\n    if (!user.email.endsWith(\"@neu.edu.ph\")) {\n      setUser(null);\n      logout();\n      alert(\"Please use your NEU email to log in.\");\n    }\n    if (role) {\n      if (role == \"admin\") {\n        return /*#__PURE__*/_jsxDEV(AdminLogin, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 16\n        }, this);\n      }\n      if (role == \"librarian\") {\n        //insert librarian dashboard here\n      }\n      if (role == \"student\") {\n        return /*#__PURE__*/_jsxDEV(StudentLogin, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 16\n        }, this);\n      }\n      // IF NO ROLE ASSIGNED THRU SQL it defaults to the student dashboard\n      if (!role) {\n        return /*#__PURE__*/_jsxDEV(StudentLogin, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 16\n        }, this);\n      }\n    }\n  }\n}\n_s(App, \"iTY3qP3pH2KEmGVhPeeHSfaPq48=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Login","AdminLogin","StudentLogin","jsxDEV","_jsxDEV","App","_s","user","setUser","role","setRole","fetchUserRole","userId","_data$","data","error","from","select","eq","console","getUser","auth","userRole","id","subscription","onAuthStateChange","_event","session","then","unsubscribe","logout","signOut","fileName","_jsxFileName","lineNumber","columnNumber","email","endsWith","alert","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/ThesesTracker/thesis-app/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { supabase } from \"./lib/helper/supabaseClient.js\";\r\nimport Login from './login/Login.jsx';\r\nimport AdminLogin from './login/AdminLogin.jsx';\r\nimport StudentLogin from './login/StudentLogin.jsx';\r\n\r\nexport default function App() {\r\n  const [user, setUser] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n\r\n  useEffect(() => {\r\n    \r\n    // Function to fetch role from PostgreSQL based on userID\r\n    const fetchUserRole = async (userId) => {\r\n      const { data, error } = await supabase\r\n        .from('user_roles') // SQL Table name\r\n        .select('role') // the uhhhh table component containing the roles\r\n        .eq('user_id', userId);\r\n\r\n      if (error) {\r\n        console.error('Error fetching role:', error);\r\n        return null;\r\n      }\r\n\r\n      return data[0]?.role; // Assuming only one role per user\r\n    };\r\n\r\n    const getUser = async () => {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (user) {\r\n          setUser(user);\r\n          // Fetch role from the database (PostgreSQL)\r\n          const userRole = await fetchUserRole(user.id);\r\n          /*\r\n          // If the user has no role, default to \"student\"\r\n          if (!userRole) {\r\n            await supabase.rpc('create_user_role', {\r\n              user_id: user.id,\r\n            });\r\n            \r\n            await supabase\r\n              .from(\"user_roles\")\r\n              .insert({ \r\n                user_id: user.id, role: \"student\" \r\n              });\r\n\r\n              const userRole = await fetchUserRole(user.id);\r\n          }\r\n          */\r\n          setRole(userRole);\r\n      }\r\n    };\r\n\r\n    getUser();\r\n\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\r\n      setUser(session?.user || null);\r\n      if (session?.user) {\r\n        fetchUserRole(session.user.id).then(setRole); // Fetch role on session change\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const logout = async () => {\r\n    await supabase.auth.signOut();\r\n    setUser(null);\r\n    setRole(null);\r\n  };\r\n\r\n  if(!user){\r\n    return <Login />\r\n  }\r\n  if (user){\r\n    if(!user.email.endsWith(\"@neu.edu.ph\")){\r\n      setUser(null);\r\n      logout();\r\n      alert(\"Please use your NEU email to log in.\");\r\n    }\r\n    if(role){\r\n      if(role == \"admin\"){\r\n        return <AdminLogin logout={logout} />\r\n      }\r\n      if(role == \"librarian\"){\r\n        //insert librarian dashboard here\r\n      }\r\n      if(role == \"student\"){\r\n        return <StudentLogin logout={logout} />\r\n      }\r\n      // IF NO ROLE ASSIGNED THRU SQL it defaults to the student dashboard\r\n      if(!role){\r\n        return <StudentLogin logout={logout} />\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}